    #THIS SCRIPT CHANGES YOUR PASSWORD BASED ON THE PARAMETERS PLACED IT DOES NOT CHANGE THE WINDOWS SETTINGS BUT IT DOES MEET COMPLEXITY REQUIREMENTS
    
    
    # READ THE COMMENT AT THE TOP


function Test-Password {
    param (
        [string]$Password
    )
    
    # Define password rules
    $minLength = 8  # Minimum length
    $maxLength = 20 # Maximum length
    $requireUpper = $true  # Require at least one uppercase letter
    $requireLower = $true  # Require at least one lowercase letter
    $requireDigit = $true   # Require at least one digit
    $requireSpecial = $true  # Require at least one special character

    # Check password length
    if ($Password.Length -lt $minLength -or $Password.Length -gt $maxLength) {
        return Password must be between $minLength and $maxLength characters long.
    }

    # Check for uppercase letters
    if ($requireUpper -and (-not ($Password -cmatch '[A-Z]'))) {
        return Password must contain at least one uppercase letter.
    }

    # Check for lowercase letters
    if ($requireLower -and (-not ($Password -cmatch '[a-z]'))) {
        return Password must contain at least one lowercase letter.
    }

    # Check for digits
    if ($requireDigit -and (-not ($Password -cmatch 'd'))) {
        return Password must contain at least one digit.
    }

    # Check for special characters
    if ($requireSpecial -and (-not ($Password -cmatch '[!@#$%^&(),.{}]'))) {
        return Password must contain at least one special character.
    }

    return $true  # Password is valid
}

# Main script
do {
    # Prompt for password
    $password = Read-Host -Prompt Enter a new password

    # Test the password against the rules
    $validationResult = Test-Password -Password $password

    if ($validationResult -ne $true) {
        Write-Host Invalid password $validationResult -ForegroundColor Red
    } else {
        Write-Host Password is valid. -ForegroundColor Green
        # Here you can proceed with further actions, like setting the password
        # For example Set-LocalUser -Name YourUsername -Password (ConvertTo-SecureString $password -AsPlainText -Force)
    }
} while ($validationResult -ne $true)
